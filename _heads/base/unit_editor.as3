stop();

units_create_back_btn.addEventListener(MouseEvent.CLICK, return_to_unit_selector);
function return_to_unit_selector(event: MouseEvent){
	gotoAndStop(1); //!
}

var unitp_wheel_grip: int = 100;
var unitp_maximum_distance: int = 0;
var unitp_angle_restriction_out: int = 0;
var unitp_angle_restriction_in: int = 0;
var unitp_top_speed_restriction: int = 0;
var unitp_max_up_climb: int = 0;
var unitp_max_down_climb: int = 0;

function add8spaces(num: Number){
	var result: String = "";
	for(var i: int = 0; i < 8 - String(num).length; i++){
		result += " ";
	}
	return result + String(num);
}

function add32spaces(num: int){
	var result: String = "";
	for(var i: int = 0; i < 29 - String(num).length; i++){
		result += " ";
	}
	return result + String(num);
}

function update_unit_listing(){
	if (unit_maker.cars == null){
		return;
	}
	if (unit_listing.the_list == null){
		return;
	}
	unit_listing.the_list.text = "";
	var finalString: String = "";
	for (var i:int = 0; i < unit_maker.cars.length; i++){
		var currentCar = unit_maker.cars[i];
		var currentString: String = "";
		if (i < 9) {
			currentString += "0";
		}
		currentString += String(i + 1);
		currentString += ": ";
		if (currentCar[1] == "engine"){
			currentString += "ENGINE "; 
			currentString += add8spaces(currentCar[2]);
			currentString += "kW ";
			currentString += add8spaces(currentCar[3]);
			currentString += "N ";
			currentString += add8spaces(currentCar[0]);
			currentString += "KG";
		} else {
			currentString += "LOAD   ";
			currentString += add32spaces(currentCar[0]);
			currentString += "KG";
		}
		currentString += '\n';
		finalString += currentString;
	}
	unit_listing.the_list.text = finalString;
}

function loadedUnits(){
	quick_add_new_car(0, 1, "engine", 1, 10);
	updateUnitData();
}

function updateUnitData(){
	unit_car_count.text = String(unit_maker.cars.length) + "/24";
	update_unit_listing();
	unit_maker.updateCars();
	fillUnitDataPanel();
}

function quick_add_new_car(carIndex: int, carMass: int, carType: String, engineForce: Number, brakingForce: Number){
	if (unit_maker.cars == null){
		return;
	}
	unit_maker.addNewCar(carIndex, carMass, carType, engineForce, brakingForce);
}

function quick_remove_car(carIndex: int){
	if (unit_maker.cars == null){
		return;
	}
	unit_maker.removeCarByIndex(carIndex);
}

function compute_unit_car_length(){
	return 20;
}

function compute_unit_length(){
	if (unit_maker.cars == null){
		return;
	}
	return (unit_maker.cars.length * 20);
}

function compute_unit_length_spaced(){
	if (unit_maker.cars == null){
		return;
	}
	return (unit_maker.cars.length * 21);
}

function compute_load_count(){
	if (unit_maker.cars == null){
		return;
	}
	return unit_maker.loadCount;
}

function compute_engine_count(){
	if (unit_maker.cars == null){
		return;
	}
	return unit_maker.engineCount;
}

function compute_unit_mass(){
	if (unit_maker.cars == null){
		return;
	}
	var unitMass: int = 0;
	for (var i: int = 0; i < unit_maker.cars.length; i++){
		unitMass += unit_maker.cars[i][0];
	}
	return unitMass;
}

function compute_tractive_power(){
	if (unit_maker.cars == null){
		return;
	}
	var unitPower: int = 0;
	for (var i: int = 0; i < unit_maker.cars.length; i++){
		unitPower += unit_maker.cars[i][2];
	}
	return unitPower;
}

function compute_braking_power(){
	if (unit_maker.cars == null){
		return;
	}
	var unitBrake: int = 0;
	for (var i: int = 0; i < unit_maker.cars.length; i++){
		unitBrake += unit_maker.cars[i][3];
	}
	return unitBrake;
}

function compute_weight_center(){
	if (unit_maker.cars == null){
		return;
	}
	var momentSum: Number = 0;
	for (var i: int = 0; i < unit_maker.cars.length; i++){
		var currentCarCenter: Number;
		var currentCarMoment: Number;
		currentCarCenter = i*21 + (20/2);
		currentCarMoment = currentCarCenter * unit_maker.cars[i][0];
		momentSum += currentCarMoment;
	}
	return momentSum/(compute_unit_mass());
}

function compute_weight_center_car_index(){
	if (unit_maker.cars == null){
		return;
	}
	var weight_center: Number = compute_weight_center();
	for (var i: int = 0; i < unit_maker.cars.length; i++){
		var leftInt: Number = 21*i;
		var rightInt: Number = 21*i + 20;
		if (leftInt <= weight_center && weight_center <= rightInt){
			return i + 1;
		}
	}
	return 0;
}

function fillUnitDataPanel(){
	unit_data_panel.udata_car_length.text = String(compute_unit_car_length());
	unit_data_panel.udata_unit_length.text = String(compute_unit_length()) + "m|" + String(compute_unit_length_spaced()) + "m";
	unit_data_panel.udata_car_count.text = String(compute_engine_count()) + "E|" + String(compute_load_count()) + "L";
	unit_data_panel.udata_unit_mass.text = String(compute_unit_mass());
	unit_data_panel.udata_unit_tractive_power.text = String(compute_tractive_power());
	unit_data_panel.udata_unit_braking_power.text = String(compute_braking_power());
	unit_data_panel.udata_unit_weight_center.text = String(compute_weight_center()) + "m | car_" + String(compute_weight_center_car_index());
	unit_data_panel.udata_wheel_grip.text = String(unitp_wheel_grip);
	unit_data_panel.udata_maximum_distance.text = String(unitp_maximum_distance);
	unit_data_panel.udata_angle_restriction_in.text = String(unitp_angle_restriction_in);
	unit_data_panel.udata_angle_restriction_out.text = String(unitp_angle_restriction_out);
	unit_data_panel.udata_top_speed_restriction.text = String(unitp_top_speed_restriction);
	unit_data_panel.udata_max_upwards_climb_angle.text = String(unitp_max_up_climb);
	unit_data_panel.udata_max_downwards_climb_angle.text = String(unitp_max_down_climb);
}